name: Windows Build
on:
  pull_request:
  push:
    branches:
      - main
      - dev

jobs:
  msvc:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [ Debug, Release ]
        gpu_api: [ None, OpenCL ]
        vectorize: [ true, false ]
        exclude:
          - gpu_api: OpenCL
            vectorize: false
          - gpu_api: Vulkan
            vectorize: false
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      GPU_API: ${{ matrix.gpu_api }}
      VECTORIZE: ${{ matrix.vectorize }}
    steps:
      - name: echo matrix variables (build_type = ${{ matrix.build_type }})
        run: |
          echo "env:BUILD_TYPE = $env:BUILD_TYPE"
          echo "env:GPU_API = $env:GPU_API"

      - name: Install ninja
        shell: cmd
        run: |
          "C:\Program Files\7-Zip\7z.exe"
          choco install ninja
          ninja --version

      - name: Install deps with vcpkg
        shell: cmd
        run: |
          mkdir C:\vcpkg\downloads
          curl -JL -o C:/vcpkg/downloads/tukaani-project-xz-v5.4.4.tar.gz "https://github.com/xz-mirror/xz/archive/refs/tags/v5.4.4.tar.gz"
          vcpkg install --triplet=x64-windows zlib libpng bzip2 zstd liblzma libzip eigen3 xsimd boost-iostreams boost-uuid boost-multi-array tl-expected fmt cereal magic-enum

      - name: Install OpenCL with vcpkg
        if: matrix.gpu_api == 'OpenCL'
        run: vcpkg install opencl --triplet=x64-windows

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get short SHA
        run: |
          echo "GITHUB_SHA = $env:GITHUB_SHA"
          $short_sha=$env:GITHUB_SHA.substring(0,7)
          echo "short_sha = $short_sha"
          echo "SHORT_SHA=$short_sha" >> $env:GITHUB_ENV

      - name: make dirs
        run: |
          mkdir bin
          mkdir bin/Qt6.5.0-msvc-shared
          mkdir 3rdParty

      - name: Install winget
        if: matrix.gpu_api == 'Vulkan'
        shell: pwsh
        run: |
          $progressPreference = 'silentlyContinue'
          Write-Information "Downloading WinGet and its dependencies..."
          Invoke-WebRequest -Uri https://aka.ms/getwinget -OutFile Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
          Invoke-WebRequest -Uri https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appx
          Invoke-WebRequest -Uri https://github.com/microsoft/microsoft-ui-xaml/releases/download/v2.8.6/Microsoft.UI.Xaml.2.8.x64.appx -OutFile Microsoft.UI.Xaml.2.8.x64.appx
          Add-AppxPackage Microsoft.VCLibs.x64.14.00.Desktop.appx
          Add-AppxPackage Microsoft.UI.Xaml.2.8.x64.appx
          Add-AppxPackage Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle

      - name: Install Vulkan with vcpkg
        if: matrix.gpu_api == 'Vulkan'
        run: winget install KhronosGroup.VulkanSDK
      #          cmd
      #          curl -JL -o bin/VulkanSDK.7z "https://github.com/SlopeCraft/QtBinaries/releases/download/vulkan1.3.250.1-windows/VulkanSDK-1.3.250.1.7z"
      #          7z x -o"C:\Program Files\VulkanSDK" bin/VulkanSDK.7z
      #          exit
      #          tree /f "C:\Program Files\VulkanSDK"

      - name: Download Qt6.5.0-msvc-shared and extract
        run: |
          cmd
          curl -JL -o bin/Qt6.5.0-msvc-shared.7z "https://github.com/SlopeCraft/QtBinaries/releases/download/qt6.5.0-x86_64-msvc-windows/Qt6.5.0-msvc-shared.7z"
          7z x -o"bin/Qt6.5.0-msvc-shared" bin/Qt6.5.0-msvc-shared.7z
          exit
          tree /f bin/Qt6.5.0-msvc-shared
          # Qt installation dir: bin/Qt6.5.0-msvc-shared

      #      - name: Configure libnbt++
      #        shell: cmd
      #        run: |
      #          cd 3rdParty
      #          git clone https://github.com/PrismLauncher/libnbtplusplus
      #          cd libnbtplusplus
      #          git checkout 23b955121b8217c1c348a9ed2483167a6f3ff4ad
      #          mkdir build ../libnbt++
      #          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" & cmake -S . -B ./build -G Ninja -DCMAKE_C_COMPILER:FILEPATH=cl -DCMAKE_CXX_COMPILER:FILEPATH=cl -DCMAKE_PREFIX_PATH:PATH="C:/vcpkg/installed/x64-windows" -DCMAKE_INSTALL_PREFIX:PATH=../libnbt++ -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" -DNBT_BUILD_SHARED=OFF -DNBT_USE_ZLIB=OFF -DNBT_BUILD_TESTS=OFF
      #
      #
      #      - name: Build and install libnbt++
      #        shell: cmd
      #        run: |
      #          cd 3rdParty/libnbtplusplus
      #          cmake --build ./build --parallel
      #          cmake --install ./build
      #          cd ..
      #          tree /f libnbt++

      - name: CMake configure
        shell: cmd
        run: |
          mkdir build
          mkdir install
          set PATH=C:\Program Files\VulkanSDK\1.3.250.1\Bin;C:\Program Files\PowerShell\7;C:\vcpkg;C:\Program Files (x86)\NSIS\;C:\Program Files\dotnet;C:\Program Files (x86)\GitHub CLI;C:\Program Files\Git\bin;C:\Program Files\OpenSSL\bin;C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin;C:\Program Files\Microsoft\jdk-11.0.16.101-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\dotnet\;C:\Program Files\PowerShell\7\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\CMake\bin;C:\Program Files\Microsoft SDKs\Service Fabric\Tools\ServiceFabricLocalClusterManager;C:\Program Files\Git\cmd;C:\Program Files\GitHub CLI\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\LLVM\bin;C:\Users\runneradmin\.dotnet\tools;C:\Users\runneradmin\.cargo\bin;C:\Users\runneradmin\AppData\Local\Microsoft\WindowsApps
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" & cmake -S . -B ./build -G Ninja -DCMAKE_C_COMPILER:FILEPATH=cl -DCMAKE_CXX_COMPILER:FILEPATH=cl -DCMAKE_PREFIX_PATH:PATH="D:/a/SlopeCraft/SlopeCraft/bin/Qt6.5.0-msvc-shared;C:/vcpkg/installed/x64-windows/;D:/a/SlopeCraft/SlopeCraft/3rdParty/libnbt++;C:/Program Files/VulkanSDK/1.3.250.1" -DCMAKE_INSTALL_PREFIX:PATH=D:/a/SlopeCraft/SlopeCraft/install -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" -DSlopeCraft_GPU_API:STRING="${{ matrix.gpu_api }}" -DSlopeCraft_vectorize:BOOL="${{ matrix.vectorize }}" -DSlopeCraft_windeployqt_flags_install:STRING=-release;--no-translations
        # -DCMAKE_C_COMPILER:FILEPATH=clang-cl -DCMAKE_CXX_COMPILER:FILEPATH=clang-cl -DCMAKE_RC_COMPILER:FILEPATH=llvm-rc
      - name: CMake build
        shell: cmd
        run: |
          tree ./build
          cmake --build ./build --parallel 10

      - name: CMake install
        shell: cmd
        run: |
          cmake --install ./build

      - name: Make zip and 7z packs with CPack
        run: |
          $basedir=(pwd).path.replace("\\","/")
          cd ./build
          cpack -G ZIP -B "$basedir/pack"
          cpack -G 7Z -B "$basedir/pack"
      
      #- name: Upload zip pack
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: SlopeCraft-dev-${{ env.SHORT_SHA }}-${{ matrix.build_type }}-${{ matrix.gpu_api }}-vec=${{ matrix.vectorize }}-windows-clang-zip
      #    path: pack/SlopeCraft*.zip
      #    if-no-files-found: error

      - name: Upload 7z pack
        uses: actions/upload-artifact@v3
        with:
          name: SlopeCraft-dev-${{ env.SHORT_SHA }}-${{ matrix.build_type }}-${{ matrix.gpu_api }}-vec=${{ matrix.vectorize }}-windows-clang-7z
          path: pack/SlopeCraft*.7z
          if-no-files-found: error

  gcc:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [ Debug, Release ]
        gpu_api: [ None ]
        vectorize: [ true, false ]
        exclude:
          - gpu_api: OpenCL
            vectorize: false
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      GPU_API: ${{ matrix.gpu_api }}
      VECTORIZE: ${{ matrix.vectorize }}
    steps:
      - name: echo matrix variables (build_type = ${{ matrix.build_type }})
        run: |
          echo "env:BUILD_TYPE = $env:BUILD_TYPE"
          echo "env:GPU_API = $env:GPU_API"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ninja
        run: |
          choco install ninja
          ninja --version

      - name: Get short SHA
        run: |
          echo "GITHUB_SHA = $env:GITHUB_SHA"
          $short_sha=$env:GITHUB_SHA.substring(0,7)
          echo "short_sha = $short_sha"
          echo "SHORT_SHA=$short_sha" >> $env:GITHUB_ENV

      - name: Filter perl-related pathes from env:path, and append directory of gcc13 to path
        run: |
          $basedir=(pwd).path.replace("\\","/")
          $exclude_key_words="perl","Strawberry"
          $new_path=""
          foreach($p in $env:path.split(';')) {$exclude=$false; foreach($ekw in $exclude_key_words)	{if($p.contains($ekw)) {$exclude=$true;break;}}if(-not($exclude)) {$new_path="$new_path;$p"}}
          $env:path="$basedir/bin/mingw64/bin;C:/Program Files/7-Zip;$new_path"
          echo "New path : $env:path.split(';')"
          echo "NEW_PATH=$env:path" >> $env:GITHUB_ENV

      - name: Install ninja
        run: |
          choco install ninja
          ninja --version

      - name: Make dirs
        run: |
          mkdir bin
          mkdir bin/mingw64
          mkdir bin/Qt6.5.0-gcc11-shared-offical
          mkdir 3rdParty

      - name: Download mingw64 and extract
        run: |
          cmd
          curl -JL -o bin/gcc13.7z "https://github.com/niXman/mingw-builds-binaries/releases/download/13.2.0-rt_v11-rev1/x86_64-13.2.0-release-posix-seh-ucrt-rt_v11-rev1.7z"
          7z x -obin bin/gcc13.7z
          exit
        # gcc installation dir: bin/mingw64
        # gcc.exe: bin/mingw64/bin/gcc.exe
        # g++.exe: bin/mingw64/bin/g++.exe
      - name: Install deps with vcpkg
        run: |
          $basedir=(pwd).path.replace("\\","/")
          $BUILD_TYPE=$env:BUILD_TYPE
          $GPU_API=$env:GPU_API
          $env:path=$env:NEW_PATH
          echo "env:path = $env:path"
          mkdir C:\vcpkg\downloads
          curl -JL -o C:/vcpkg/downloads/tukaani-project-xz-v5.4.4.tar.gz "https://github.com/xz-mirror/xz/archive/refs/tags/v5.4.4.tar.gz"
          cd C:/vcpkg
          git pull
          vcpkg install --triplet=x64-mingw-dynamic zlib bzip2 zstd liblzma libpng libzip eigen3 xsimd boost-iostreams boost-uuid boost-multi-array tl-expected magic-enum


      - name: Install OpenCL with vcpkg
        if: matrix.gpu_api == 'OpenCL'
        run: |
          $basedir=(pwd).path.replace("\\","/")
          $BUILD_TYPE=$env:BUILD_TYPE
          $GPU_API=$env:GPU_API
          $env:path=$env:NEW_PATH
          echo "env:path = $env:path"
          vcpkg install opencl --triplet=x64-mingw-dynamic

      - name: Download Qt6.5.0-gcc11-shared-offical and extract
        run: |
          cmd
          curl -JL -o bin/Qt6.5.0-gcc11-shared-offical.7z "https://github.com/SlopeCraft/QtBinaries/releases/download/qt6.5.0-x86_64-mingw-windows/Qt6.5.0-gcc11-shared-offical.7z"
          7z x -o"bin/Qt6.5.0-gcc11-shared-offical" bin/Qt6.5.0-gcc11-shared-offical.7z
          exit
          tree /f bin/Qt6.5.0-gcc11-shared-offical
        # Qt installation dir: bin/Qt6.5.0-gcc11-shared-offical
      - name: CMake configure
        run: |
          $basedir=(pwd).path.replace("\\","/")
          $BUILD_TYPE=$env:BUILD_TYPE
          $GPU_API=$env:GPU_API
          $env:path="$basedir/bin/mingw64/bin;C:/Program Files/7-Zip;$env:path"
          echo "env:path = $env:path"
          mkdir build
          mkdir install
          cmake -S . -B build -G "MinGW Makefiles" -DCMAKE_C_COMPILER:FILEPATH="$basedir/bin/mingw64/bin/gcc.exe" -DCMAKE_CXX_COMPILER:FILEPATH="$basedir/bin/mingw64/bin/g++.exe" -DCMAKE_PREFIX_PATH:PATH="$basedir/bin/Qt6.5.0-gcc11-shared-offical;C:/vcpkg/installed/x64-mingw-dynamic" -DCMAKE_INSTALL_PREFIX:PATH="$basedir/install" -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DSlopeCraft_GPU_API:STRING="$GPU_API" -DSlopeCraft_vectorize:BOOL=$VECTORIZE

      - name: CMake build
        run: |
          $basedir=(pwd).path.replace("\\","/")
          $env:path=$env:NEW_PATH
          echo "Number of processors = $env:NUMBER_OF_PROCESSORS"
          cmake --build ./build --parallel 10

      - name: CMake install
        run: |
          $basedir=(pwd).path.replace("\\","/")
          $env:path=$env:NEW_PATH
          cmake --install ./build

      #- name: Run CTest
      #  if: matrix.build_type == 'Release'
      #  run: |
      #    $basedir=(pwd).path.replace("\\","/")
      #    $env:path=$env:NEW_PATH
      #    cd ./build
      #    ctest -j10 --output-on-failure --stop-on-failure

      - name: Make zip and 7z packs with CPack
        run: |
          $basedir=(pwd).path.replace("\\","/")
          $env:path=$env:NEW_PATH
          cd ./build
          cpack -G 7Z -B "$basedir/pack"
        #cpack -G ZIP -B "$basedir/pack"

      #- name: Upload zip pack
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: SlopeCraft-dev-${{ env.SHORT_SHA }}-${{ matrix.build_type }}-${{ matrix.gpu_api }}-vec=${{ matrix.vectorize }}-windows-zip
      #    path: pack/SlopeCraft*.zip
      #    if-no-files-found: error

      - name: Upload 7z pack
        uses: actions/upload-artifact@v3
        with:
          name: SlopeCraft-dev-${{ env.SHORT_SHA }}-${{ matrix.build_type }}-${{ matrix.gpu_api }}-vec=${{ matrix.vectorize }}-windows-gcc-7z
          path: pack/SlopeCraft*.7z
          if-no-files-found: error
